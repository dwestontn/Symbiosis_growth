group_by(key) %>%
do(test = kruskal.test(x= .$value, g = .$muttype))
df
df <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype))
df <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
library(tidyr)
df <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df
View(df)
df2 <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df2
tidyverse_update()
tidyr_update()
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
install.packages(c("digest", "foreign", "survival", "TTR", "xts", "zoo"))
df2 <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df2
View(ados.sim)
library(tidyr)
library(dplyr)
df2 <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df2
install.packages("tidyverse")
library(tidyverse)
df2 <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df2
library(broom)
df2 <- ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
df2
head(ados.sim)
hed(dat)
head(dat)
names(dat)
names(dat) %>% tally()
names(dat) %>% tally
dat %>% tally
dat %>% select(treat_cond) %>% tally
head(ados.sim)
?gather
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks %>% gather(stock, price, -time)
stocks %>% gather(stock, price, -time) %>% filter(time == "2009-01-01")
head(ados.sim)
df <- ados.sim %>% gather(key, value, -muttype) %>% filter(muttype == "missense")
df
target<-c("Ph1-pellet-Sfallax", "Ph1-super-Sfallax")
trash<-dat %>% select(treat_cond, JGI_compound_id, peak_ht) %>% filter(treat_cond %in% target)
head(trash)
summary(trash)
df <- ados.sim %>% gather(key, value, -muttype) %>% head
df
head(trash)
trash %>% filer(JGI_compound_id == "5")
trash %>% filter(JGI_compound_id == "5")
df %>% trash %>% filter(JGI_compound_id == "5")
df <- trash %>% filter(JGI_compound_id == "5")
df
trash <- df %>% gather(key, value, -treat_cond) %>%
group_by(key, JGI_compound_id) %>%
do(test = kruskal.test(x= .$value, g = .$muttype))
trash <- df %>% gather(key, value, -treat_cond)
trash
df
df <- trash %>% filter(JGI_compound_id == "5" & JGI_compound_id == "8")
target <- c("5", "8")
df <- trash %>% filter(JGI_compound_id == target)
df <- trash %>% filter(JGI_compound_id %in% target)
trash
df <- dat %>% filter(JGI_compound_id %in% target)
df
target<-c("5", "8")
trash<-dat %>% select(treat_cond, JGI_compound_id, peak_ht) %>% filter(JGI_compound_id %in% target)
trash
target<-c("Ph1-pellet-Sfallax", "Ph1-super-Sfallax")
trash<-trash %>% filter(treat_cond %in% target)
trash
head(ados.sim)
x <- ados.sim %>% gather(key, value, -muttype) %>% head
x
df1<-trash %>% gather(key, value, -treat_cond) %>% head
df1
df1<-trash %>% gather(key, value, -treat_cond) %>% tail
df1
df1<-trash %>% gather(key, value, -treat_cond)
View(df1)
df1<-trash %>% gather(key, value, -treat_cond) %>% group_by(key) %>%
do(test = kruskal.test(x= .$value, g = .$treat_cond))
ados.sim %>% gather(key, value, -muttype) %>% tail
df1<-trash %>% group_by(treat_cond) %>%
do(test = kruskal.test(x= .$peak_ht, g = .$treat_cond))
head(tip)
head(tips)
tips %>%
select(tip, total_bill, sex) %>% head
gather(key = variable, value = value, -sex) %>% head
tips %>%
select(tip, total_bill, sex) %>%
gather(key = variable, value = value, -sex) %>%  head
tips %>%
select(tip, total_bill, sex) %>%
gather(key = variable, value = value, -sex) %>%  tail
tips %>%
select(tip, total_bill, sex) %>%
gather(key = variable, value = value, -sex) %>%
group_by(sex, variable) %>%
summarise(value = list(value)) %>%
spread(sex, value)
View(trash)
View(df1)
df2<-df1 %>% group_by(treat_cond) %>%
do(test = kruskal.test(x= .$peak_ht, g = .$treat_cond))
df2<-df1 %>% group_by(treat_cond, key) %>%
do(test = kruskal.test(x= .$peak_ht, g = .$treat_cond))
trash
tips
head(df1)
heads(ados.sim)
head(ados.sim)
head(ados.sim)
head(trash)
head(ados.sim)
head(trash)
dfx <- trash %>% gather(key, value, -treat_cond) %>%
group_by(key) %>%
do(test = kruskal.test(x= .$value, g = .$treat_cond))
ados.sim %>% gather(key, value, -muttype)
head(trash)
head(tips)
t.test(tip ~ sex, data = tips)$p.value
t.test(peak_ht ~ JGI_compound_id, data = trash)$p.value
tips %>%
summarise_each(funs(t.test(.[sex == "Female"], .[sex == "Male"])$p.value), vars = total_bill:tip)
View(trash)
summarise_each(funs(t.test(.[treat_cond == "Ph1-pellet-Sfallax"], .[treat_cond == "Ph1-super-Sfallax"])$p.value), vars = JGI_compound_id:peak_ht)
trash %>% summarise_each(funs(t.test(.[treat_cond == "Ph1-pellet-Sfallax"], .[treat_cond == "Ph1-super-Sfallax"])$p.value), vars = JGI_compound_id:peak_ht)
View(trash)
trash %>% group_by(treat_cond, JGI_compound_id) %>% summarise(mean = mean(peak_ht))
trash %>% group_by(treat_cond, JGI_compound_id) %>% summarise(KW = kruskal.test(peak_ht))
trash %>% group_by(treat_cond, JGI_compound_id) %>% summarise(KW = kruskal.test(peak_ht~treat_cond))
trash %>% group_by(treat_cond, JGI_compound_id) %>% summarise(KW = kruskal.test(peak_ht~JGI_compound_id))
tips
head(ados.sim)
ados.sim %>% gather(key, value, -muttype)
ados.sim %>% gather(key, value, -muttype) %>%
group_by(key) %>%
do(tidy(kruskal.test(x= .$value, g = .$muttype)))
trash
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
trash %>% as.factor(group_by(JGI_compound_id)) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
trash$JGI_compound_id <- as.factor(trash$JGI_compound_id)
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
trash$JGI_compound_id <- as.factor(trash$JGI_compound_id)
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
is.finite(trash)
class(trash)
trash<-as.data.frame(trash)
class(trash)
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
class(trash)
trash$JGI_compound_id <- as.factor(trash$JGI_compound_id)
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
View(trash)
results <- list()
for(i in names(ados.sim[,2:4])){
results[[i]] <- kruskal.test(formula(paste(i, "~ muttype")), data = ados.sim)
}
for(i in names(ados.sim[,2:4])){
print(i)
trash$treat_cond <- as.factor(trash$treat_cond)
trash %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
trash %>% group_by(treat_cond, JGI_compound_id) %>% summarise(mean = mean(peak_ht), stdev = sd(peak_ht))
trash2 %>% trash %>% filter(JGI_compound_id == "5")
trash2 <- trash %>% filter(JGI_compound_id == "5")
trash2
kruskal.test(peak_ht ~ treat_cond, data = trash2)
head(dat)
target<-c("Ph1-pellet-Sfallax", "Ph1-super-Sfallax")
x<-dat %>% select(treat_cond, JGI_compound_id, peak_ht) %>% filter(treat_cond %in% target)
x %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
x$JGI_compound_id <- as.factor(x$JGI_compound_id)
x %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
x$treat_cond <- as.factor(x$treat_cond)
x %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
View(x)
y<- x %>% group_by(JGI_compound_id) %>%
do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
View(y)
View(y)
View(y)
by_cyl <- group_by(mtcars, cyl)
do(by_cyl, head(., 2))
by_cyl
models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
models
summarise(models, rsq = summary(mod)$r.squared)
models
x
a = c(5,7,2,9)
ifelse(a > 5,"uptake","emitt")
y<- x %>% group_by(JGI_compound_id) %>% do(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
y<- x %>% group_by(JGI_compound_id) %>% do(kruskal.test(x= .$peak_ht, g = .$treat_cond))
y<- x %>% group_by(JGI_compound_id) %>% do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)) %>% mutate(mean_sup = mean("Ph1-pellet-Sfallax", mean_pell = mean("Ph1-super-Sfallax")))
View(y)
View(y)
y<- x %>% group_by(JGI_compound_id) %>% do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
z<- x %>% group_by(JGI_compound_id) %>% mutate(mean_sup = mean("Ph1-pellet-Sfallax", mean_pell = mean("Ph1-super-Sfallax")))
View(x)
View(y)
View(z)
z<- x %>% group_by(JGI_compound_id) %>% do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)) %>% summerise(mean_sup = mean("Ph1-pellet-Sfallax")
z<- x %>% group_by(JGI_compound_id) %>% do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond))) %>% summerise(mean_sup = mean("Ph1-pellet-Sfallax"))
z<- x %>% group_by(JGI_compound_id) %>% summerise(mean_sup = mean("Ph1-pellet-Sfallax"))
z<- x %>% group_by(JGI_compound_id) %>% summerize(mean_sup = mean("Ph1-pellet-Sfallax"))
View(y)
View(y)
View(trash)
target<-c("Ph1-pellet-Sfallax", "Ph1-super-Sfallax")
x<-dat %>% select(treat_cond, JGI_compound_id, peak_ht) %>% filter(treat_cond %in% target)
x$JGI_compound_id <- as.factor(x$JGI_compound_id)
x$treat_cond <- as.factor(x$treat_cond)
y<- x %>% group_by(JGI_compound_id) %>% do(tidy(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
View(y)
y<- x %>% group_by(JGI_compound_id) %>% do(kruskal.test(x= .$peak_ht, g = .$treat_cond)))
y<- x %>% group_by(JGI_compound_id) %>% do(kruskal.test(x= .$peak_ht, g = .$treat_cond))
View(y)
z<- x %>% group_by(treat_cond, JGI_compound_id) %>% summarise(uPellet = mean("Ph1-pellet-Sfallax"), uSuper = mean("Ph1-super-Sfallax"))
View(z)
z<- x %>% group_by(JGI_compound_id) %>% summarise(uPellet = mean("Ph1-pellet-Sfallax"), uSuper = mean("Ph1-super-Sfallax"))
View(z)
z<- x %>% group_by(JGI_compound_id) %>% mutate(uPellet = mean("Ph1-pellet-Sfallax"), uSuper = mean("Ph1-super-Sfallax"))
View(z)
View(x)
View(x)
View(y)
View(x)
z<- x %>% group_by(JGI_compound_id) %>% ifelse(variable == "Ph1-pellet-Sfallax" >"Ph1-super-Sfallax", uptake, ellute)
z<- x %>% group_by(JGI_compound_id) %>% ifelse(variable = "Ph1-pellet-Sfallax" > "Ph1-super-Sfallax", uptake, ellute)
z<- x %>% group_by(JGI_compound_id) %>% ifelse("Ph1-pellet-Sfallax" > "Ph1-super-Sfallax", uptake, ellute)
View(x)
crossfeed_output_PelFung_cyanoSuper_halfstrength <- read.csv("~/Documents/Manuscripts:data/cross_feeding_JGI_2018/crossfeed_output_PelFung_cyanoSuper_halfstrength.csv")
View(crossfeed_output_PelFung_cyanoSuper_halfstrength)
datFunCyano <- crossfeed_output_PelFung_cyanoSuper_halfstrength
crossfeed_output_PelFung_mossSuper_halfstrength <- read.csv("~/Documents/Manuscripts:data/cross_feeding_JGI_2018/crossfeed_output_PelFung_mossSuper_halfstrength.csv")
View(crossfeed_output_PelFung_mossSuper_halfstrength)
datFunMoss <- crossfeed_output_PelFung_mossSuper_halfstrength
View(datFunCyano)
library(dbplyr)
metFunElluted <- datFunCyano %>% filter(met_direction == "eluted by pellet" & p.value <= 0.05) %>% select(label, mean_PelFung_SupCyano, mean_super_cyano)
library(dplyr)
metFunElluted <- datFunCyano %>% filter(met_direction == "eluted by pellet" & p.value <= 0.05) %>% select(label, mean_PelFung_SupCyano, mean_super_cyano)
metFunUptake <- datFunCyano %>% filter(met_direction == "uptake by pellet" & p.value <=0.05) %>% select(label)
View(metFunElluted)
View(metFunUptake)
View(metFunElluted)
View(metFunUptake)
View(metFunUptake)
View(metFunElluted)
View(metFunElluted)
View(metFunElluted)
View(metFunUptake)
View(metFunUptake)
View(datFunCyano)
View(datFunMoss)
metFunElluted.moss <- datFunMoss %>% filter(met_direction == "eluted by pellet" & p.value <= 0.05) %>% select(label, mean_PelFung_SupMoss, mean_super_moss)
metFunUptake.moss <- datFunMoss %>% filter(met_direction == "uptake by pellet" & p.value <=0.05) %>% select(label)
View(metFunElluted.moss)
View(metFunUptake.moss)
View(datFunCyano)
View(metFunUptake.moss)
View(metFunElluted.moss)
setwd("~/git")
setwd("~/Documents/Manuscripts:data/GitHub/Symbiosis_growth")
library(captioner)
fig_nums <- captioner(prefix = "Fig.")
fig.1_cap <- fig_nums(name = "fig_1",
caption = "2018 data, change in growth (initial weight (wt) - final wt among the two symbiotic partners alone and when added togather but grown seperately (_seperate) and when grown together in same well (_symbiosis). Cyano in symbiosis includes, endophytes, epiphytes and free living cyano.  Data incuded all pH conditions")
fig.2_cap <- fig_nums(name = "fig_2",
caption = "2018 data, change in growth among interacting partners faceted by starting pH condiiton. Measured components as described in fig. 1")
fig.3_cap <- fig_nums(name = "fig_3",
caption = "2018 data, total well biomass change from experiment start to finish. Includes moss + cyano endophyte and free living cyanobacteria not attached to plant")
fig.4_cap <- fig_nums(name = "fig_4",
caption = "2018 data, change in pH change as measured by (final - initial values)")
fig.5_cap <- fig_nums(name = "fig_5",
caption = "2018 data, absolute value of pH change as measured by (final - initial values)")
fig.6_cap <- fig_nums(name = "fig_6",
caption = "2017 data, change in growth (initial weight (wt) - final wt among the two symbiotic partners alone, when added togather but grown seperately (_seperate) and when grown together in same well (_symbiosis). Conditions aggregated over pH")
fig.7_cap <- fig_nums(name = "fig_7",
caption = "2017 data, change in growth (initial weight (wt) - final wt among the two symbiotic partners alone, when added togather but grown seperately (_seperate) and when grown together in same well (_symbiosis). Similar to Fig. 6 except faceted by pH")
fig.8_cap <- fig_nums(name = "fig_8",
caption = "Combined 2018 and 2017 data for change in growth (initial weight (wt) - among the two symbiotic partners alone, when added togather but grown seperately (_seperate) and when grown together in same well (_symbiosis). Data is faceted by pH")
library(tidyverse)
library(dplyr)
#knitr by default will set the working directory to the source file location
#setwd("~/Documents/Manuscripts:data/Symbiosis_study_2018")
dat1 <- read_csv("fallax_cyano_symbiosis_colleen_10_01_2018.csv") %>% mutate(delta_weight = delta_weight_g *1000)
names(dat1)
summary(dat1)
dim(dat1)
ggplot(dat1, aes(color = component_measured,y= delta_weight, x= component_measured)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t<-ggplot(dat1, aes(color = component_measured, y= delta_weight, x= component_measured)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t+facet_grid(.~initial_pH)
dat.well<-dat1 %>% filter(component_measured == "Cyanobacteria_moss_symbiosis")
t<-ggplot(dat.well, aes(y= delta_weight, x= component_measured)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t+facet_grid(.~initial_pH)
dat.ph.change<-dat1 %>% mutate(pH_change = final_pH - initial_pH)
t<-ggplot(dat.ph.change, aes(color = component_measured, y= pH_change, x= component_measured)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.text=element_text(size=16))
t+facet_grid(.~initial_pH)
dat.ph.abs.change<-dat1 %>% mutate(abs_pH_change = abs(final_pH - initial_pH))
t<-ggplot(dat.ph.abs.change, aes(color = component_measured, y= abs_pH_change, x= component_measured)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.text=element_text(size=16))
t+facet_grid(.~initial_pH)
dat2 <- read_csv("fallax_cyano_symbiosis_allyssa_colleen_2017.csv")
dat3 <- dat2 %>% filter(pH == 3.5 | pH == 5.5 | pH == 8.5)
names(dat3)
summary(dat3)
dim(dat3)
ggplot(dat3, aes(color = condition,y= delta_weight, x= condition)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t<-ggplot(dat3, aes(color = condition,y= delta_weight, x= condition)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t+facet_grid(.~pH)
dat.2018 <- dat1 %>% filter(component_measured == "moss_alone" | component_measured == "cyano_alone" | component_measured == "Cyanobacteria_moss_symbiosis" |
component_measured =="Cyanobacteria_moss_seperate") %>%
select(condition = component_measured, pH = initial_pH, delta_weight) %>%
mutate(condition = paste0(condition, "_2018"))
dat.2017 <- dat3 %>% select(condition, pH, delta_weight) %>%
mutate(condition = paste0(condition, "_2017"))
dat.combined<-rbind(dat.2018, dat.2017)
t<-ggplot(dat.combined, aes(color = condition,y= delta_weight, x= condition)) +
geom_boxplot(position=position_dodge(.8)) +
geom_jitter(position=position_dodge(.8)) +
theme(axis.text=element_text(size=12),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=16))
t+facet_grid(.~pH)
# converting pH and condition to factor
dat.2017$pH<-factor(dat.2017$pH, levels =c(3.5, 5.5, 8.5), labels = c("pH_3.5", "pH_5.5", "pH_8.5"))
dat.2017$condition<-factor(dat.2017$condition, levels =c("cyano_alone_2017", "moss_alone_2017", "Cyanobacteria_moss_seperate_2017", "Cyanobacteria_moss_symbiosis_2017"), labels = c("cyano_alone_2017", "moss_alone_2017", "Cyanobacteria_moss_seperate_2017", "Cyanobacteria_moss_symbiosis_2017"))
#check with str(dat.2017)
dat.2017.aov2<-aov(delta_weight ~ condition + pH + condition:pH, data = dat.2017)
summary(dat.2017.aov2)
dat.2017 %>% group_by(condition, pH) %>% summarize(count = n(), mean = mean(delta_weight, na.rm = TRUE), sd = sd(delta_weight, na.rm = TRUE))
TukeyHSD(dat.2017.aov2, which = "condition")
par(mfrow = c(1,2))
plot(dat.2017.aov2, 1)
plot(dat.2017.aov2, 2)
# Extract the residuals
aov_residuals <- residuals(object = dat.2017.aov2)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals)
# converting pH and condition to factor
dat.2018$pH<-factor(dat.2018$pH, levels =c(3.5, 5.5, 8.5), labels = c("pH_3.5", "pH_5.5", "pH_8.5"))
dat.2018$condition<-factor(dat.2018$condition, levels =c("moss_alone_2018", "cyano_alone_2018", "Cyanobacteria_moss_symbiosis_2018", "Cyanobacteria_moss_seperate_2018"), labels = c("moss_alone_2018", "cyano_alone_2018", "Cyanobacteria_moss_symbiosis_2018", "Cyanobacteria_moss_seperate_2018"))
#check with str(dat.2018)
dat.2018.aov2<-aov(delta_weight ~ condition + pH + condition:pH, data = dat.2018)
summary(dat.2018.aov2)
dat.2018 %>% group_by(condition, pH) %>% summarize(count = n(), mean = mean(delta_weight, na.rm = TRUE), sd = sd(delta_weight, na.rm = TRUE))
TukeyHSD(dat.2018.aov2, which = "condition")
par(mfrow = c(1,2))
plot(dat.2018.aov2, 1)
plot(dat.2018.aov2, 2)
# Extract the residuals
aov_residuals <- residuals(object = dat.2017.aov2)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals)
str(dat.2018)
dat.3.5<- dat.2018 %>% filter(pH = 3.5)
dat.3.5<- dat.2018 %>% filter(pH == 3.5)
dim(dat.3.5)
dat.3.5<- dat.2018 %>% filter(pH == "3.5")
dim(dat.3.5)
View(dat.3.5)
head(dat.2018)
dat.3.5<- dat.2018 %>% filter(pH == pH_3.5)
library(dplyr)
dat.3.5<- dat.2018 %>% filter(pH == "pH_3.5")
dim(dat.3.5)
dim(dat.2018)
str(dat.3.5)
dat.3.5.aov2<-aov(delta_weight ~ condition + pH + condition:pH, data = dat.3.5)
summary(dat.3.5.aov2)
dat.3.5.aov2<-aov(delta_weight ~ condition, data = dat.3.5)
summary(dat.3.5.aov2)
dat.3.5.aov2 <- dat.2018 %>% filter(pH == pH_3.5) %>% aov(delta_weight ~ condition, data = dat.3.5)
summary(dat.3.5.aov2)
dat.3.5.aov2 <- dat.2018 %>% filter(pH == pH_3.5) %>% aov(delta_weight ~ condition)
summary(dat.3.5.aov2)
dat.3.5.aov2 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition)
summary(dat.3.5.aov2)
dat.3.5.aov1 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition)
summary(dat.3.5.aov1)
dat.3.5.aov1 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition, data = "")
summary(dat.3.5.aov1)
dat.3.5.aov1 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition)
dat.3.5.aov1 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition, data = ".")
dat.3.5.aov1 <- dat.2018 %>% filter(pH == "pH_3.5") %>% aov(delta_weight ~ condition, data = "")
summary(dat.3.5.aov2)
dat.3.5.aov2<-aov(delta_weight ~ condition, data = dat.3.5)
summary(dat.3.5.aov2)
dat.5.5<-dat.2018 %>% filter(pH == Ph_5.5)
dat.5.5<-dat.2018 %>% filter(pH == pH_5.5)
View(dat.2018)
dat.5.5<-dat.2018 %>% filter(pH == "pH_5.5")
dim(dat.5.5)
dat.5.5.aov2<-aov(delta_weight ~ condition, data = dat.5.5)
summary(dat.5.5.aov2)
dat.8.5<-dat.2018 %>% filter(pH == "pH_8.5")
dim(.8.5)
dim(dat.8.5)
dat.8.5.aov2<-aov(delta_weight ~ condition, data = dat.8.5)
summary(dat.8.5.aov2)
dat.8.5.aov2<-lm(delta_weight ~ condition, data = dat.8.5)
summary(dat.8.5.aov2)
# Extract the residuals
aov_residuals <- residuals(object = dat.2017.aov2)
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals)
par(mfrow = c(1,2))
plot(dat.2018.aov2, 1)
plot(dat.2018.aov2, 2)
par(mfrow = c(1,2))
plot(dat.2017.aov2, 1)
plot(dat.2017.aov2, 2)
library(cars)
install.packages("CARS")
library(cars)
install.packages("car")
library(car)
leveneTest(delta_weight ~ condition, data = dat.2018)
leveneTest(delta_weight ~ pH, data = dat.2018)
table(leveneTest(delta_weight ~ condition, data = dat.2018))
leveneTest(delta_weight ~ condition, data = dat.2018)
library(tidyverse)
